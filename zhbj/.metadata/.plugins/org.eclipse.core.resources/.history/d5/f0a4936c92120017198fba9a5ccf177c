package com.shange.zhbj.utils;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.widget.ImageView;

public class NetCacheUtils {
	
	ImageView mImageView;
	String mUrl;

	public void getBitmapFromNet(ImageView imageView, String url) {
		
		mImageView = imageView;
		mUrl = url;
		//AsyncTack 异步封装的工具,可以实现异步请求及主界面更新(对线程池+handler的封装)
		new BitmapTack().execute();//启动asyncTask
	}
	/**
	 * @author 山哥
	 *三个泛型的意义:第一个泛型:doInBackground里的参数类型
	 *第二个泛型:onProgressUpdate里的参数类型
	 *第三个泛型:onPostExecute里的参数类型及doInBackground的返回类型
	 *
	 *
	 */
	class BitmapTack extends AsyncTask<Object, Integer, ImageView>{
		
		//1.预加载,运行在主线程
		@Override
		protected void onPreExecute() {
			System.out.println("onPreExecute");
			super.onPreExecute();
		}
		//2.正在加载,运行在子线程(核心方法),可以直接异步请求
		@Override
		protected ImageView doInBackground(Object... params) {
			System.out.println("doInBackground");
			
			Bitmap bitmap =  download(mUrl);
			return mImageView;
		}
		//3.跟新进度的方法,运行在主线程
		@Override
		protected void onProgressUpdate(Integer... values) {
			System.out.println("onProgressUpdate");
			super.onProgressUpdate(values);
		}
		
		//4.加载结束,运行在主线程(核心方法),可以直接更新UI
		@Override
		protected void onPostExecute(ImageView result) {
			System.out.println("onPostExecute");
			super.onPostExecute(result);
		}
		
		
	}
	public Bitmap download(String url) {
		//doInBackground是在子线程,所以这里不需要开启子线程
		
		try {
			//创建url对象
			URL url2 = new URL(url);
			//打开连接
			HttpURLConnection openConnection = (HttpURLConnection) url2.openConnection();
			
			
			openConnection.setConnectTimeout(3000);//设置连接超时时间
			openConnection.setReadTimeout(5000);//设置读取超时时间
			openConnection.connect();//连接网络
			
			int responseCode = openConnection.getResponseCode();//获取响应码
			if(responseCode == 200){//等于200说明连接成功
				InputStream inputStream = openConnection.getInputStream();//获取读取流
				
				Bitmap bitmap = BitmapFactory.decodeStream(inputStream);//将流转化为bitmap
				
				return bitmap;//返回bitmap
				
			}
			
			
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		
		
		
		
		return null;
	}

}
