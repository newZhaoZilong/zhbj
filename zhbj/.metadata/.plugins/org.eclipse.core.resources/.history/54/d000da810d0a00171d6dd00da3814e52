package com.shange.zhbj;

import java.util.ArrayList;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;

public class GuideActivity extends Activity {

	private ViewPager mViewPager;

	private int[] mImageIds = new int[]{R.drawable.guide_1,R.drawable.guide_2,R.drawable.guide_3};

	private ArrayList<ImageView> mImageList;

	private LinearLayout ll_container;
	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);//去标题,必须在setContentView之前调用
		setContentView(R.layout.activity_guide);
		ll_container = (LinearLayout) findViewById(R.id.ll_container);
		mViewPager = (ViewPager) findViewById(R.id.vp_guide);//viewpager自带滑动功能
		initData();
		mViewPager.setAdapter(new GuideAdapter());

	}

	//初始化数据
	private void initData(){
		mImageList = new ArrayList<ImageView>();
		ImageView imageview;
		ImageView pointImage;//这样能成,说明linearlayout可以添加重复的
		
		for(int i = 0;i<3;i++){
			imageview = new ImageView(this);
			//设置背景图片
			imageview.setBackgroundResource(mImageIds[i]);
			mImageList.add(imageview);
			//初始化小圆点
			pointImage = new ImageView(this);
			pointImage.setImageResource(R.drawable.shape_point_gray);//设置图片
			//初始化布局参数,宽高包括内容,父控件是谁,就是谁声明的布局参数
			LayoutParams layoutParams = new LinearLayout.LayoutParams(
					LayoutParams.WRAP_CONTENT,
					LayoutParams.WRAP_CONTENT);
			if(i>0){//保证最左边的点是从0开始
				//设置左边距
				layoutParams.leftMargin = 10;
				
			}
			pointImage.setLayoutParams(layoutParams);//设置布局参数,我想问,这是给图片设置的
			//跟相对布局,线性布局有什么关系
			
			ll_container.addView(pointImage);//给容器添加圆点,
		}

	}
	class GuideAdapter extends PagerAdapter{//ViewPager的适配器

		//item的个数
		@Override
		public int getCount() {

			return mImageList.size();
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			//固定写法,判断arg1是否是view
			return arg0 == arg1;
		}
		//初始化item布局
		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			ImageView imageView = mImageList.get(position);
			container.addView(imageView);//添加控件,不添加,一张都看不见
			return imageView;
		}
		//销毁item,一般适配器里的ViewGroup指的都是setAdapter的View
		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {

			container.removeView((View)object);
		}


	}

}
