package com.shange.zhbj.view;

import com.shange.zhbj.R;

import android.content.Context;
import android.media.AudioRecord.OnRecordPositionUpdateListener;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

public class PullToRefreshListView extends ListView {

	private static final int STATE_PULL_TO_REFRESH = 1;//下拉刷新
	private static final int STATE_RELEASE_TO_REFRESH = 2;//释放刷新
	private static final int STATE_REFRESHING = 3;//刷新中
	private int mCurrentState = STATE_PULL_TO_REFRESH;//当前刷新状态
	private View mHeadView;
	private int mHeaderViewHeight;
	private int startY = -1;
	private TextView tvTitle;
	private TextView tvTime;
	private ImageView ivArrow;
	private RotateAnimation rotateUpAnim;
	private RotateAnimation rotateDownAnim;
	private ProgressBar pbProgress;
	public PullToRefreshListView(Context context) {
		super(context);
		initHeadView();
	}

	public PullToRefreshListView(Context context, AttributeSet attrs) {
		super(context, attrs);
		initHeadView();
	}

	public PullToRefreshListView(Context context, AttributeSet attrs,
			int defStyle) {
		super(context, attrs, defStyle);
		initHeadView();
	}
	/**
	 * 初始化头布局
	 * 
	 */
	private void initHeadView(){
		mHeadView = View.inflate(getContext(), R.layout.pull_to_refresh, null);
		//添加头布局
		addHeaderView(mHeadView);
		tvTitle = (TextView) mHeadView.findViewById(R.id.tv_title);
		tvTime = (TextView) mHeadView.findViewById(R.id.tv_time);
		ivArrow = (ImageView) mHeadView.findViewById(R.id.iv_arrow);

		pbProgress = (ProgressBar) mHeadView.findViewById(R.id.pb_loading);


		//隐藏头布局
		mHeadView.measure(0, 0);
		mHeaderViewHeight = mHeadView.getMeasuredHeight();

		mHeadView.setPadding(0, -mHeaderViewHeight, 0, 0);
		initAnimation();
	}

	@Override
	public boolean onTouchEvent(MotionEvent ev) {
		switch (ev.getAction()) {
		case MotionEvent.ACTION_DOWN:
			startY  = (int) ev.getY();

			break;
		case MotionEvent.ACTION_MOVE:
			if(startY  == -1){//当用户按住头条新闻的viewpager进行下拉时,actiondown,会被viewpager消费
				startY = (int)ev.getY();//导致startY没有赋值,此处需要重新获取一下

			}
			if(mCurrentState == STATE_REFRESHING){
				//如果是正在刷新,跳出循环
				break;//这时候正在更新数据
			}
			int endY = (int)ev.getY();
			int dy = endY - startY;//y轴偏移量,为正向下拉,为负时,向上拉
			int firstVisiblePosition = getFirstVisiblePosition();//当前显示的第一个item角标
			//必须向下拉,并且当前显示的是第一个item
			if(dy>0 && firstVisiblePosition ==0){
				int padding = dy - mHeaderViewHeight;//计算当前下拉控件的padding值
				mHeadView.setPadding(0, padding, 0, 0);
				//padding>0说明头布局完全拉出来了,
				if(padding >0 && mCurrentState!=STATE_RELEASE_TO_REFRESH){
					//改为松开刷新
					mCurrentState = STATE_RELEASE_TO_REFRESH;//记录当前状态
					refreshState();
				}else if (padding <0 && mCurrentState != STATE_PULL_TO_REFRESH){
					//也就是说她又拉回来了
					//改为下拉刷新
					mCurrentState = STATE_PULL_TO_REFRESH;
					refreshState();
				}
				return true;
			}

			break;
		case MotionEvent.ACTION_UP:
			startY = -1;
			if(mCurrentState == STATE_RELEASE_TO_REFRESH){
				mCurrentState = STATE_REFRESHING;
				refreshState();
				//完整展示头布局
				mHeadView.setPadding(0, 0, 0, 0);
				//完整展示头布局
				//4.进行回调
				if(mListener !=null){
					mListener.onRefresh();//刷新数据
				}
				
				
			}else if(mCurrentState == STATE_PULL_TO_REFRESH){
				//说明没有拉过界,只是玩玩
				//恢复原来的状态,隐藏头布局

				mHeadView.setPadding(0, -mHeaderViewHeight, 0, 0);

			}

			break;

		}


		return super.onTouchEvent(ev);
	}
	/**
	 * 初始化头布局的动画
	 */
	private void initAnimation(){
		rotateUpAnim = new RotateAnimation(0, -180,//从0度,逆时针旋转180度,箭头,从下逆时针旋转180度变为朝上,
				Animation.RELATIVE_TO_SELF, 0.5f,
				Animation.RELATIVE_TO_SELF, 0.5f);
		rotateUpAnim.setDuration(300);
		rotateUpAnim.setFillAfter(true);//动画停留在结束位置
		rotateDownAnim = new RotateAnimation(-180f, -360,//箭头,从上逆时针旋转180度变为朝下,跟up形成一个循环
				Animation.RELATIVE_TO_SELF, 0.5f,
				Animation.RELATIVE_TO_SELF, 0.5f);
		rotateDownAnim.setDuration(300);
		rotateDownAnim.setFillAfter(true);//动画停留在结束位置
	}
	
	/**
	 * 根据当前状态刷新界面
	 */
	private void refreshState() {

		switch (mCurrentState) {
		case STATE_PULL_TO_REFRESH:
			tvTitle.setText("下拉刷新");
			pbProgress.setVisibility(View.INVISIBLE);
			ivArrow.setVisibility(View.VISIBLE);
			ivArrow.startAnimation(rotateUpAnim);
			break;
		case STATE_RELEASE_TO_REFRESH:
			tvTitle.setText("释放刷新");
			pbProgress.setVisibility(View.INVISIBLE);
			ivArrow.setVisibility(View.VISIBLE);
			ivArrow.startAnimation(rotateDownAnim);
			break;
		case STATE_REFRESHING:
			tvTitle.setText("正在刷新...");
			ivArrow.clearAnimation();//清除箭头动画,否则无法隐藏
			pbProgress.setVisibility(View.VISIBLE);
			ivArrow.setVisibility(View.INVISIBLE);
			break;
		}

	}
	//3.定义成员变量,接收监听对象
	private OnRefreshListener mListener;
	
	
	public void setOnRefreshListener(OnRefreshListener refreshListener){
		mListener = refreshListener;
	}

	/**
	 * @author 山哥
	 *1.下拉刷新的回调接口
	 *
	 */
	public interface OnRefreshListener{
		
		public void onRefresh();
	}
}
